create or replace 
procedure DisableAllConstraints is
	sqlCursor varchar2(2000);
	sqlDisableConstraint varchar2(2000);

	type refcursor is ref cursor;
	cursor_handle refcursor;
	recycleBinEnabled number;
begin
	--sprawdzamy, czy mamy kosz (w oracle 10g)
	select count(1) into recycleBinEnabled from all_objects where object_name = 'RECYCLEBIN';

	sqlCursor := 'select ''alter table '' || table_name || '' disable constraint '' || constraint_name';
	sqlCursor := sqlCursor || ' from user_constraints ';
	if (recycleBinEnabled != 0) then
		sqlCursor := sqlCursor || ' where table_name not in (select object_name from RECYCLEBIN where type=''TABLE'')';
	end if;
	sqlCursor := sqlCursor || ' order by decode(constraint_type, ''P'', ''Z'', constraint_type)';

	open cursor_handle for sqlCursor;
	loop
	fetch cursor_handle into sqlDisableConstraint;
		exit when cursor_handle%NOTFOUND;
	execute immediate sqlDisableConstraint;
	end loop;
	close cursor_handle;
end DisableAllConstraints;


create or replace 
procedure DisableAllTriggers is
 	cursor triggers_cursor is
 		select 'alter trigger ' || trigger_name || ' disable'
 		from user_triggers;
 	sql_ varchar2(1000);
 begin
 	open triggers_cursor;
 	loop
 		fetch triggers_cursor into sql_;
 			exit when triggers_cursor%NOTFOUND;
 		execute immediate sql_;
 	end loop;
 	close triggers_cursor;
 end DisableAllTriggers;
 
 
------------------

create or replace 
procedure EnableAllConstraints is
	sqlCursor varchar2(2000);
	sqlDisableConstraint varchar2(2000);

	type refcursor is ref cursor;
	cursor_handle refcursor;
	recycleBinEnabled number;
begin
	--sprawdzamy, czy mamy kosz (w oracle 10g)
	select count(1) into recycleBinEnabled from all_objects where object_name = 'RECYCLEBIN';

	sqlCursor := 'select ''alter table '' || table_name || '' enable constraint '' || constraint_name';
	sqlCursor := sqlCursor || ' from user_constraints ';
	if (recycleBinEnabled != 0) then
		sqlCursor := sqlCursor || ' where table_name not in (select object_name from RECYCLEBIN where type=''TABLE'')';
	end if;
	sqlCursor := sqlCursor || ' order by decode(constraint_type, ''P'', ''Z'', constraint_type) desc';

	open cursor_handle for sqlCursor;
	loop
	fetch cursor_handle into sqlDisableConstraint;
		exit when cursor_handle%NOTFOUND;
	execute immediate sqlDisableConstraint;
	end loop;
	close cursor_handle;
end EnableAllConstraints;

create or replace 
procedure EnableAllTriggers is
 	cursor triggers_cursor is
 		select 'alter trigger ' || trigger_name || ' enable'
 		from user_triggers;
 	sql_ varchar2(1000);
 begin
 	open triggers_cursor;
 	loop
 		fetch triggers_cursor into sql_;
 			exit when triggers_cursor%NOTFOUND;
 		execute immediate sql_;
 	end loop;
 	close triggers_cursor;
 end EnableAllTriggers;